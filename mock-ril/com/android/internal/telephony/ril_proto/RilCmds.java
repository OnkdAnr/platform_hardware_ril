// Generated by the protocol buffer compiler.  DO NOT EDIT!

package com.android.internal.telephony.ril_proto;

public final class RilCmds {
  private RilCmds() {}
  // enum RilCommand
  public static final int CMD_GET_SIM_STATUS = 1;
  public static final int CMD_ENTER_SIM_PIN = 2;
  public static final int CMD_HANGUP = 12;
  public static final int CMD_SCREEN_STATE = 61;
  
  // enum RadioState
  public static final int RADIO_STATE_OFF = 0;
  public static final int RADIO_STATE_UNAVAILABLE = 1;
  public static final int RADIO_STATE_SIM_NOT_READY = 2;
  public static final int RADIO_STATE_SIM_LOCKED_OR_ABSENT = 3;
  public static final int RADIO_STATE_SIM_READY = 4;
  public static final int RADIO_STATE_RUIM_NOT_READY = 5;
  public static final int RADIO_STATE_RUIM_READY = 6;
  public static final int RADIO_STATE_RUIM_LOCKED_OR_ABSENT = 7;
  public static final int RADIO_STATE_NV_NOT_READY = 8;
  public static final int RADIO_STATE_NV_READY = 9;
  
  // enum RilCardState
  public static final int CARDSTATE_ABSENT = 0;
  public static final int CARDSTATE_PRESENT = 1;
  public static final int CARDSTATE_ERROR = 2;
  
  // enum RilPersoSubstate
  public static final int PERSOSUBSTATE_UNKNOWN = 0;
  public static final int PERSOSUBSTATE_IN_PROGRESS = 1;
  public static final int PERSOSUBSTATE_READY = 2;
  public static final int PERSOSUBSTATE_SIM_NETWORK = 3;
  public static final int PERSOSUBSTATE_SIM_NETWORK_SUBSET = 4;
  public static final int PERSOSUBSTATE_SIM_CORPORATE = 5;
  public static final int PERSOSUBSTATE_SIM_SERVICE_PROVIDER = 6;
  public static final int PERSOSUBSTATE_SIM_SIM = 7;
  public static final int PERSOSUBSTATE_SIM_NETWORK_PUK = 8;
  public static final int PERSOSUBSTATE_SIM_NETWORK_SUBSET_PUK = 9;
  public static final int PERSOSUBSTATE_SIM_CORPORATE_PUK = 10;
  public static final int PERSOSUBSTATE_SIM_SERVICE_PROVIDER_PUK = 11;
  public static final int PERSOSUBSTATE_SIM_SIM_PUK = 12;
  public static final int PERSOSUBSTATE_RUIM_NETWORK1 = 13;
  public static final int PERSOSUBSTATE_RUIM_NETWORK2 = 14;
  public static final int PERSOSUBSTATE_RUIM_HRPD = 15;
  public static final int PERSOSUBSTATE_RUIM_CORPORATE = 16;
  public static final int PERSOSUBSTATE_RUIM_SERVICE_PROVIDER = 17;
  public static final int PERSOSUBSTATE_RUIM_RUIM = 18;
  public static final int PERSOSUBSTATE_RUIM_NETWORK1_PUK = 19;
  public static final int PERSOSUBSTATE_RUIM_NETWORK2_PUK = 20;
  public static final int PERSOSUBSTATE_RUIM_HRPD_PUK = 21;
  public static final int PERSOSUBSTATE_RUIM_CORPORATE_PUK = 22;
  public static final int PERSOSUBSTATE_RUIM_SERVICE_PROVIDER_PUK = 23;
  public static final int PERSOSUBSTATE_RUIM_RUIM_PUK = 24;
  
  // enum RilAppState
  public static final int APPSTATE_UNKNOWN = 0;
  public static final int APPSTATE_DETECTED = 1;
  public static final int APPSTATE_PIN = 2;
  public static final int APPSTATE_PUK = 3;
  public static final int APPSTATE_SUBSCRIPTION_PERSO = 4;
  public static final int APPSTATE_READY = 5;
  
  // enum RilPinState
  public static final int PINSTATE_UNKNOWN = 0;
  public static final int PINSTATE_ENABLED_NOT_VERIFIED = 1;
  public static final int PINSTATE_ENABLED_VERIFIED = 2;
  public static final int PINSTATE_DISABLED = 3;
  public static final int PINSTATE_ENABLED_BLOCKED = 4;
  public static final int PINSTATE_ENABLED_PERM_BLOCKED = 5;
  
  // enum RilAppType
  public static final int APPTYPE_UNKNOWN = 0;
  public static final int APPTYPE_SIM = 1;
  public static final int APPTYPE_USIM = 2;
  public static final int APPTYPE_RUIM = 3;
  public static final int APPTYPE_CSIM = 4;
  
  public static final class RilAppStatus extends
      com.google.protobuf.micro.MessageMicro {
    public RilAppStatus() {}
    
    // optional .ril_proto.RilAppType app_type = 1;
    public static final int APP_TYPE_FIELD_NUMBER = 1;
    private boolean hasAppType;
    private int appType_ = com.android.internal.telephony.ril_proto.RilCmds.APPTYPE_UNKNOWN;
    public boolean hasAppType() { return hasAppType; }
    public int getAppType() { return appType_; }
    public RilAppStatus setAppType(int value) {
      hasAppType = true;
      appType_ = value;
      return this;
    }
    public RilAppStatus clearAppType() {
      hasAppType = false;
      appType_ = com.android.internal.telephony.ril_proto.RilCmds.APPTYPE_UNKNOWN;
      return this;
    }
    
    // optional .ril_proto.RilAppState app_state = 2;
    public static final int APP_STATE_FIELD_NUMBER = 2;
    private boolean hasAppState;
    private int appState_ = com.android.internal.telephony.ril_proto.RilCmds.APPSTATE_UNKNOWN;
    public boolean hasAppState() { return hasAppState; }
    public int getAppState() { return appState_; }
    public RilAppStatus setAppState(int value) {
      hasAppState = true;
      appState_ = value;
      return this;
    }
    public RilAppStatus clearAppState() {
      hasAppState = false;
      appState_ = com.android.internal.telephony.ril_proto.RilCmds.APPSTATE_UNKNOWN;
      return this;
    }
    
    // optional .ril_proto.RilPersoSubstate perso_substate = 3;
    public static final int PERSO_SUBSTATE_FIELD_NUMBER = 3;
    private boolean hasPersoSubstate;
    private int persoSubstate_ = com.android.internal.telephony.ril_proto.RilCmds.PERSOSUBSTATE_UNKNOWN;
    public boolean hasPersoSubstate() { return hasPersoSubstate; }
    public int getPersoSubstate() { return persoSubstate_; }
    public RilAppStatus setPersoSubstate(int value) {
      hasPersoSubstate = true;
      persoSubstate_ = value;
      return this;
    }
    public RilAppStatus clearPersoSubstate() {
      hasPersoSubstate = false;
      persoSubstate_ = com.android.internal.telephony.ril_proto.RilCmds.PERSOSUBSTATE_UNKNOWN;
      return this;
    }
    
    // optional string aid = 4;
    public static final int AID_FIELD_NUMBER = 4;
    private boolean hasAid;
    private java.lang.String aid_ = "";
    public java.lang.String getAid() { return aid_; }
    public boolean hasAid() { return hasAid; }
    public RilAppStatus setAid(java.lang.String value) {
      hasAid = true;
      aid_ = value;
      return this;
    }
    public RilAppStatus clearAid() {
      hasAid = false;
      aid_ = "";
      return this;
    }
    
    // optional string app_label = 5;
    public static final int APP_LABEL_FIELD_NUMBER = 5;
    private boolean hasAppLabel;
    private java.lang.String appLabel_ = "";
    public java.lang.String getAppLabel() { return appLabel_; }
    public boolean hasAppLabel() { return hasAppLabel; }
    public RilAppStatus setAppLabel(java.lang.String value) {
      hasAppLabel = true;
      appLabel_ = value;
      return this;
    }
    public RilAppStatus clearAppLabel() {
      hasAppLabel = false;
      appLabel_ = "";
      return this;
    }
    
    // optional int32 pin1_replaced = 6;
    public static final int PIN1_REPLACED_FIELD_NUMBER = 6;
    private boolean hasPin1Replaced;
    private int pin1Replaced_ = 0;
    public int getPin1Replaced() { return pin1Replaced_; }
    public boolean hasPin1Replaced() { return hasPin1Replaced; }
    public RilAppStatus setPin1Replaced(int value) {
      hasPin1Replaced = true;
      pin1Replaced_ = value;
      return this;
    }
    public RilAppStatus clearPin1Replaced() {
      hasPin1Replaced = false;
      pin1Replaced_ = 0;
      return this;
    }
    
    // optional .ril_proto.RilPinState pin1 = 7;
    public static final int PIN1_FIELD_NUMBER = 7;
    private boolean hasPin1;
    private int pin1_ = com.android.internal.telephony.ril_proto.RilCmds.PINSTATE_UNKNOWN;
    public boolean hasPin1() { return hasPin1; }
    public int getPin1() { return pin1_; }
    public RilAppStatus setPin1(int value) {
      hasPin1 = true;
      pin1_ = value;
      return this;
    }
    public RilAppStatus clearPin1() {
      hasPin1 = false;
      pin1_ = com.android.internal.telephony.ril_proto.RilCmds.PINSTATE_UNKNOWN;
      return this;
    }
    
    // optional .ril_proto.RilPinState pin2 = 8;
    public static final int PIN2_FIELD_NUMBER = 8;
    private boolean hasPin2;
    private int pin2_ = com.android.internal.telephony.ril_proto.RilCmds.PINSTATE_UNKNOWN;
    public boolean hasPin2() { return hasPin2; }
    public int getPin2() { return pin2_; }
    public RilAppStatus setPin2(int value) {
      hasPin2 = true;
      pin2_ = value;
      return this;
    }
    public RilAppStatus clearPin2() {
      hasPin2 = false;
      pin2_ = com.android.internal.telephony.ril_proto.RilCmds.PINSTATE_UNKNOWN;
      return this;
    }
    
    public final RilAppStatus clear() {
      clearAppType();
      clearAppState();
      clearPersoSubstate();
      clearAid();
      clearAppLabel();
      clearPin1Replaced();
      clearPin1();
      clearPin2();
      cachedSize = -1;
      return this;
    }
    
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasAppType()) {
        output.writeInt32(1, getAppType());
      }
      if (hasAppState()) {
        output.writeInt32(2, getAppState());
      }
      if (hasPersoSubstate()) {
        output.writeInt32(3, getPersoSubstate());
      }
      if (hasAid()) {
        output.writeString(4, getAid());
      }
      if (hasAppLabel()) {
        output.writeString(5, getAppLabel());
      }
      if (hasPin1Replaced()) {
        output.writeInt32(6, getPin1Replaced());
      }
      if (hasPin1()) {
        output.writeInt32(7, getPin1());
      }
      if (hasPin2()) {
        output.writeInt32(8, getPin2());
      }
    }
    
    private int cachedSize = -1;
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }
    
    public int getSerializedSize() {
      int size = 0;
      if (hasAppType()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(1, getAppType());
      }
      if (hasAppState()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(2, getAppState());
      }
      if (hasPersoSubstate()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(3, getPersoSubstate());
      }
      if (hasAid()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeStringSize(4, getAid());
      }
      if (hasAppLabel()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeStringSize(5, getAppLabel());
      }
      if (hasPin1Replaced()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(6, getPin1Replaced());
      }
      if (hasPin1()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(7, getPin1());
      }
      if (hasPin2()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(8, getPin2());
      }
      cachedSize = size;
      return size;
    }
    
    public RilAppStatus mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
              setAppType(input.readInt32());
            break;
          }
          case 16: {
              setAppState(input.readInt32());
            break;
          }
          case 24: {
              setPersoSubstate(input.readInt32());
            break;
          }
          case 34: {
            setAid(input.readString());
            break;
          }
          case 42: {
            setAppLabel(input.readString());
            break;
          }
          case 48: {
            setPin1Replaced(input.readInt32());
            break;
          }
          case 56: {
              setPin1(input.readInt32());
            break;
          }
          case 64: {
              setPin2(input.readInt32());
            break;
          }
        }
      }
    }
    
    public static RilAppStatus parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (RilAppStatus) (new RilAppStatus().mergeFrom(data));
    }
    
    public static RilAppStatus parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return (RilAppStatus) (new RilAppStatus().mergeFrom(input));
    }
    
  }
  
  public static final class RilCardStatus extends
      com.google.protobuf.micro.MessageMicro {
    public RilCardStatus() {}
    
    // optional .ril_proto.RilCardState card_state = 1;
    public static final int CARD_STATE_FIELD_NUMBER = 1;
    private boolean hasCardState;
    private int cardState_ = com.android.internal.telephony.ril_proto.RilCmds.CARDSTATE_ABSENT;
    public boolean hasCardState() { return hasCardState; }
    public int getCardState() { return cardState_; }
    public RilCardStatus setCardState(int value) {
      hasCardState = true;
      cardState_ = value;
      return this;
    }
    public RilCardStatus clearCardState() {
      hasCardState = false;
      cardState_ = com.android.internal.telephony.ril_proto.RilCmds.CARDSTATE_ABSENT;
      return this;
    }
    
    // optional .ril_proto.RilPinState universal_pin_state = 2;
    public static final int UNIVERSAL_PIN_STATE_FIELD_NUMBER = 2;
    private boolean hasUniversalPinState;
    private int universalPinState_ = com.android.internal.telephony.ril_proto.RilCmds.PINSTATE_UNKNOWN;
    public boolean hasUniversalPinState() { return hasUniversalPinState; }
    public int getUniversalPinState() { return universalPinState_; }
    public RilCardStatus setUniversalPinState(int value) {
      hasUniversalPinState = true;
      universalPinState_ = value;
      return this;
    }
    public RilCardStatus clearUniversalPinState() {
      hasUniversalPinState = false;
      universalPinState_ = com.android.internal.telephony.ril_proto.RilCmds.PINSTATE_UNKNOWN;
      return this;
    }
    
    // optional int32 gsm_umts_subscription_app_index = 3;
    public static final int GSM_UMTS_SUBSCRIPTION_APP_INDEX_FIELD_NUMBER = 3;
    private boolean hasGsmUmtsSubscriptionAppIndex;
    private int gsmUmtsSubscriptionAppIndex_ = 0;
    public int getGsmUmtsSubscriptionAppIndex() { return gsmUmtsSubscriptionAppIndex_; }
    public boolean hasGsmUmtsSubscriptionAppIndex() { return hasGsmUmtsSubscriptionAppIndex; }
    public RilCardStatus setGsmUmtsSubscriptionAppIndex(int value) {
      hasGsmUmtsSubscriptionAppIndex = true;
      gsmUmtsSubscriptionAppIndex_ = value;
      return this;
    }
    public RilCardStatus clearGsmUmtsSubscriptionAppIndex() {
      hasGsmUmtsSubscriptionAppIndex = false;
      gsmUmtsSubscriptionAppIndex_ = 0;
      return this;
    }
    
    // optional int32 cdma_subscription_app_index = 4;
    public static final int CDMA_SUBSCRIPTION_APP_INDEX_FIELD_NUMBER = 4;
    private boolean hasCdmaSubscriptionAppIndex;
    private int cdmaSubscriptionAppIndex_ = 0;
    public int getCdmaSubscriptionAppIndex() { return cdmaSubscriptionAppIndex_; }
    public boolean hasCdmaSubscriptionAppIndex() { return hasCdmaSubscriptionAppIndex; }
    public RilCardStatus setCdmaSubscriptionAppIndex(int value) {
      hasCdmaSubscriptionAppIndex = true;
      cdmaSubscriptionAppIndex_ = value;
      return this;
    }
    public RilCardStatus clearCdmaSubscriptionAppIndex() {
      hasCdmaSubscriptionAppIndex = false;
      cdmaSubscriptionAppIndex_ = 0;
      return this;
    }
    
    // optional int32 num_applications = 5;
    public static final int NUM_APPLICATIONS_FIELD_NUMBER = 5;
    private boolean hasNumApplications;
    private int numApplications_ = 0;
    public int getNumApplications() { return numApplications_; }
    public boolean hasNumApplications() { return hasNumApplications; }
    public RilCardStatus setNumApplications(int value) {
      hasNumApplications = true;
      numApplications_ = value;
      return this;
    }
    public RilCardStatus clearNumApplications() {
      hasNumApplications = false;
      numApplications_ = 0;
      return this;
    }
    
    // repeated .ril_proto.RilAppStatus applications = 6;
    public static final int APPLICATIONS_FIELD_NUMBER = 6;
    private java.util.List<com.android.internal.telephony.ril_proto.RilCmds.RilAppStatus> applications_ =
      java.util.Collections.emptyList();
    public java.util.List<com.android.internal.telephony.ril_proto.RilCmds.RilAppStatus> getApplicationsList() {
      return applications_;
    }
    public int getApplicationsCount() { return applications_.size(); }
    public com.android.internal.telephony.ril_proto.RilCmds.RilAppStatus getApplications(int index) {
      return applications_.get(index);
    }
    public RilCardStatus setApplications(int index, com.android.internal.telephony.ril_proto.RilCmds.RilAppStatus value) {
      if (value == null) {
        throw new NullPointerException();
      }
      applications_.set(index, value);
      return this;
    }
    public RilCardStatus addApplications(com.android.internal.telephony.ril_proto.RilCmds.RilAppStatus value) {
      if (value == null) {
        throw new NullPointerException();
      }
      if (applications_.isEmpty()) {
        applications_ = new java.util.ArrayList<com.android.internal.telephony.ril_proto.RilCmds.RilAppStatus>();
      }
      applications_.add(value);
      return this;
    }
    public RilCardStatus clearApplications() {
      applications_ = java.util.Collections.emptyList();
      return this;
    }
    
    public final RilCardStatus clear() {
      clearCardState();
      clearUniversalPinState();
      clearGsmUmtsSubscriptionAppIndex();
      clearCdmaSubscriptionAppIndex();
      clearNumApplications();
      clearApplications();
      cachedSize = -1;
      return this;
    }
    
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasCardState()) {
        output.writeInt32(1, getCardState());
      }
      if (hasUniversalPinState()) {
        output.writeInt32(2, getUniversalPinState());
      }
      if (hasGsmUmtsSubscriptionAppIndex()) {
        output.writeInt32(3, getGsmUmtsSubscriptionAppIndex());
      }
      if (hasCdmaSubscriptionAppIndex()) {
        output.writeInt32(4, getCdmaSubscriptionAppIndex());
      }
      if (hasNumApplications()) {
        output.writeInt32(5, getNumApplications());
      }
      for (com.android.internal.telephony.ril_proto.RilCmds.RilAppStatus element : getApplicationsList()) {
        output.writeMessage(6, element);
      }
    }
    
    private int cachedSize = -1;
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }
    
    public int getSerializedSize() {
      int size = 0;
      if (hasCardState()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(1, getCardState());
      }
      if (hasUniversalPinState()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(2, getUniversalPinState());
      }
      if (hasGsmUmtsSubscriptionAppIndex()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(3, getGsmUmtsSubscriptionAppIndex());
      }
      if (hasCdmaSubscriptionAppIndex()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(4, getCdmaSubscriptionAppIndex());
      }
      if (hasNumApplications()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(5, getNumApplications());
      }
      for (com.android.internal.telephony.ril_proto.RilCmds.RilAppStatus element : getApplicationsList()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeMessageSize(6, element);
      }
      cachedSize = size;
      return size;
    }
    
    public RilCardStatus mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
              setCardState(input.readInt32());
            break;
          }
          case 16: {
              setUniversalPinState(input.readInt32());
            break;
          }
          case 24: {
            setGsmUmtsSubscriptionAppIndex(input.readInt32());
            break;
          }
          case 32: {
            setCdmaSubscriptionAppIndex(input.readInt32());
            break;
          }
          case 40: {
            setNumApplications(input.readInt32());
            break;
          }
          case 50: {
            com.android.internal.telephony.ril_proto.RilCmds.RilAppStatus value = new com.android.internal.telephony.ril_proto.RilCmds.RilAppStatus();
            input.readMessage(value);
            addApplications(value);
            break;
          }
        }
      }
    }
    
    public static RilCardStatus parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (RilCardStatus) (new RilCardStatus().mergeFrom(data));
    }
    
    public static RilCardStatus parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return (RilCardStatus) (new RilCardStatus().mergeFrom(input));
    }
    
  }
  
  public static final class RspStrings extends
      com.google.protobuf.micro.MessageMicro {
    public RspStrings() {}
    
    // repeated string strings = 1;
    public static final int STRINGS_FIELD_NUMBER = 1;
    private java.util.List<java.lang.String> strings_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.String> getStringsList() {
      return strings_;
    }
    public int getStringsCount() { return strings_.size(); }
    public java.lang.String getStrings(int index) {
      return strings_.get(index);
    }
    public RspStrings setStrings(int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  strings_.set(index, value);
      return this;
    }
    public RspStrings addStrings(java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  if (strings_.isEmpty()) {
        strings_ = new java.util.ArrayList<java.lang.String>();
      }
      strings_.add(value);
      return this;
    }
    public RspStrings clearStrings() {
      strings_ = java.util.Collections.emptyList();
      return this;
    }
    
    public final RspStrings clear() {
      clearStrings();
      cachedSize = -1;
      return this;
    }
    
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      for (java.lang.String element : getStringsList()) {
        output.writeString(1, element);
      }
    }
    
    private int cachedSize = -1;
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }
    
    public int getSerializedSize() {
      int size = 0;
      {
        int dataSize = 0;
        for (java.lang.String element : getStringsList()) {
          dataSize += com.google.protobuf.micro.CodedOutputStreamMicro
            .computeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getStringsList().size();
      }
      cachedSize = size;
      return size;
    }
    
    public RspStrings mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            addStrings(input.readString());
            break;
          }
        }
      }
    }
    
    public static RspStrings parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (RspStrings) (new RspStrings().mergeFrom(data));
    }
    
    public static RspStrings parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return (RspStrings) (new RspStrings().mergeFrom(input));
    }
    
  }
  
  public static final class RspIntegers extends
      com.google.protobuf.micro.MessageMicro {
    public RspIntegers() {}
    
    // repeated int32 integers = 1;
    public static final int INTEGERS_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> integers_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.Integer> getIntegersList() {
      return integers_;
    }
    public int getIntegersCount() { return integers_.size(); }
    public int getIntegers(int index) {
      return integers_.get(index);
    }
    public RspIntegers setIntegers(int index, int value) {
      integers_.set(index, value);
      return this;
    }
    public RspIntegers addIntegers(int value) {
      if (integers_.isEmpty()) {
        integers_ = new java.util.ArrayList<java.lang.Integer>();
      }
      integers_.add(value);
      return this;
    }
    public RspIntegers clearIntegers() {
      integers_ = java.util.Collections.emptyList();
      return this;
    }
    
    public final RspIntegers clear() {
      clearIntegers();
      cachedSize = -1;
      return this;
    }
    
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      for (int element : getIntegersList()) {
        output.writeInt32(1, element);
      }
    }
    
    private int cachedSize = -1;
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }
    
    public int getSerializedSize() {
      int size = 0;
      {
        int dataSize = 0;
        for (int element : getIntegersList()) {
          dataSize += com.google.protobuf.micro.CodedOutputStreamMicro
            .computeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getIntegersList().size();
      }
      cachedSize = size;
      return size;
    }
    
    public RspIntegers mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            addIntegers(input.readInt32());
            break;
          }
        }
      }
    }
    
    public static RspIntegers parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (RspIntegers) (new RspIntegers().mergeFrom(data));
    }
    
    public static RspIntegers parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return (RspIntegers) (new RspIntegers().mergeFrom(input));
    }
    
  }
  
  public static final class ReqGetSimStatus extends
      com.google.protobuf.micro.MessageMicro {
    public ReqGetSimStatus() {}
    
    public final ReqGetSimStatus clear() {
      cachedSize = -1;
      return this;
    }
    
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
    }
    
    private int cachedSize = -1;
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }
    
    public int getSerializedSize() {
      int size = 0;
      cachedSize = size;
      return size;
    }
    
    public ReqGetSimStatus mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
        }
      }
    }
    
    public static ReqGetSimStatus parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (ReqGetSimStatus) (new ReqGetSimStatus().mergeFrom(data));
    }
    
    public static ReqGetSimStatus parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return (ReqGetSimStatus) (new ReqGetSimStatus().mergeFrom(input));
    }
    
  }
  
  public static final class RspGetSimStatus extends
      com.google.protobuf.micro.MessageMicro {
    public RspGetSimStatus() {}
    
    // required .ril_proto.RilCardStatus card_status = 1;
    public static final int CARD_STATUS_FIELD_NUMBER = 1;
    private boolean hasCardStatus;
    private com.android.internal.telephony.ril_proto.RilCmds.RilCardStatus cardStatus_ = null;
    public boolean hasCardStatus() { return hasCardStatus; }
    public com.android.internal.telephony.ril_proto.RilCmds.RilCardStatus getCardStatus() { return cardStatus_; }
    public RspGetSimStatus setCardStatus(com.android.internal.telephony.ril_proto.RilCmds.RilCardStatus value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hasCardStatus = true;
      cardStatus_ = value;
      return this;
    }
    public RspGetSimStatus clearCardStatus() {
      hasCardStatus = false;
      cardStatus_ = null;
      return this;
    }
    
    public final RspGetSimStatus clear() {
      clearCardStatus();
      cachedSize = -1;
      return this;
    }
    
    public final boolean isInitialized() {
      if (!hasCardStatus) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasCardStatus()) {
        output.writeMessage(1, getCardStatus());
      }
    }
    
    private int cachedSize = -1;
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }
    
    public int getSerializedSize() {
      int size = 0;
      if (hasCardStatus()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeMessageSize(1, getCardStatus());
      }
      cachedSize = size;
      return size;
    }
    
    public RspGetSimStatus mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            com.android.internal.telephony.ril_proto.RilCmds.RilCardStatus value = new com.android.internal.telephony.ril_proto.RilCmds.RilCardStatus();
            input.readMessage(value);
            setCardStatus(value);
            break;
          }
        }
      }
    }
    
    public static RspGetSimStatus parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (RspGetSimStatus) (new RspGetSimStatus().mergeFrom(data));
    }
    
    public static RspGetSimStatus parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return (RspGetSimStatus) (new RspGetSimStatus().mergeFrom(input));
    }
    
  }
  
  public static final class ReqEnterSimPin extends
      com.google.protobuf.micro.MessageMicro {
    public ReqEnterSimPin() {}
    
    // required string pin = 1;
    public static final int PIN_FIELD_NUMBER = 1;
    private boolean hasPin;
    private java.lang.String pin_ = "";
    public java.lang.String getPin() { return pin_; }
    public boolean hasPin() { return hasPin; }
    public ReqEnterSimPin setPin(java.lang.String value) {
      hasPin = true;
      pin_ = value;
      return this;
    }
    public ReqEnterSimPin clearPin() {
      hasPin = false;
      pin_ = "";
      return this;
    }
    
    public final ReqEnterSimPin clear() {
      clearPin();
      cachedSize = -1;
      return this;
    }
    
    public final boolean isInitialized() {
      if (!hasPin) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasPin()) {
        output.writeString(1, getPin());
      }
    }
    
    private int cachedSize = -1;
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }
    
    public int getSerializedSize() {
      int size = 0;
      if (hasPin()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeStringSize(1, getPin());
      }
      cachedSize = size;
      return size;
    }
    
    public ReqEnterSimPin mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            setPin(input.readString());
            break;
          }
        }
      }
    }
    
    public static ReqEnterSimPin parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (ReqEnterSimPin) (new ReqEnterSimPin().mergeFrom(data));
    }
    
    public static ReqEnterSimPin parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return (ReqEnterSimPin) (new ReqEnterSimPin().mergeFrom(input));
    }
    
  }
  
  public static final class RspEnterSimPin extends
      com.google.protobuf.micro.MessageMicro {
    public RspEnterSimPin() {}
    
    // required int32 retries_remaining = 1;
    public static final int RETRIES_REMAINING_FIELD_NUMBER = 1;
    private boolean hasRetriesRemaining;
    private int retriesRemaining_ = 0;
    public int getRetriesRemaining() { return retriesRemaining_; }
    public boolean hasRetriesRemaining() { return hasRetriesRemaining; }
    public RspEnterSimPin setRetriesRemaining(int value) {
      hasRetriesRemaining = true;
      retriesRemaining_ = value;
      return this;
    }
    public RspEnterSimPin clearRetriesRemaining() {
      hasRetriesRemaining = false;
      retriesRemaining_ = 0;
      return this;
    }
    
    public final RspEnterSimPin clear() {
      clearRetriesRemaining();
      cachedSize = -1;
      return this;
    }
    
    public final boolean isInitialized() {
      if (!hasRetriesRemaining) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasRetriesRemaining()) {
        output.writeInt32(1, getRetriesRemaining());
      }
    }
    
    private int cachedSize = -1;
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }
    
    public int getSerializedSize() {
      int size = 0;
      if (hasRetriesRemaining()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(1, getRetriesRemaining());
      }
      cachedSize = size;
      return size;
    }
    
    public RspEnterSimPin mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            setRetriesRemaining(input.readInt32());
            break;
          }
        }
      }
    }
    
    public static RspEnterSimPin parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (RspEnterSimPin) (new RspEnterSimPin().mergeFrom(data));
    }
    
    public static RspEnterSimPin parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return (RspEnterSimPin) (new RspEnterSimPin().mergeFrom(input));
    }
    
  }
  
  public static final class ReqHangUp extends
      com.google.protobuf.micro.MessageMicro {
    public ReqHangUp() {}
    
    // required int32 connection_index = 1;
    public static final int CONNECTION_INDEX_FIELD_NUMBER = 1;
    private boolean hasConnectionIndex;
    private int connectionIndex_ = 0;
    public int getConnectionIndex() { return connectionIndex_; }
    public boolean hasConnectionIndex() { return hasConnectionIndex; }
    public ReqHangUp setConnectionIndex(int value) {
      hasConnectionIndex = true;
      connectionIndex_ = value;
      return this;
    }
    public ReqHangUp clearConnectionIndex() {
      hasConnectionIndex = false;
      connectionIndex_ = 0;
      return this;
    }
    
    public final ReqHangUp clear() {
      clearConnectionIndex();
      cachedSize = -1;
      return this;
    }
    
    public final boolean isInitialized() {
      if (!hasConnectionIndex) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasConnectionIndex()) {
        output.writeInt32(1, getConnectionIndex());
      }
    }
    
    private int cachedSize = -1;
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }
    
    public int getSerializedSize() {
      int size = 0;
      if (hasConnectionIndex()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(1, getConnectionIndex());
      }
      cachedSize = size;
      return size;
    }
    
    public ReqHangUp mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            setConnectionIndex(input.readInt32());
            break;
          }
        }
      }
    }
    
    public static ReqHangUp parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (ReqHangUp) (new ReqHangUp().mergeFrom(data));
    }
    
    public static ReqHangUp parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return (ReqHangUp) (new ReqHangUp().mergeFrom(input));
    }
    
  }
  
  public static final class ReqScreenState extends
      com.google.protobuf.micro.MessageMicro {
    public ReqScreenState() {}
    
    // required bool state = 1;
    public static final int STATE_FIELD_NUMBER = 1;
    private boolean hasState;
    private boolean state_ = false;
    public boolean getState() { return state_; }
    public boolean hasState() { return hasState; }
    public ReqScreenState setState(boolean value) {
      hasState = true;
      state_ = value;
      return this;
    }
    public ReqScreenState clearState() {
      hasState = false;
      state_ = false;
      return this;
    }
    
    public final ReqScreenState clear() {
      clearState();
      cachedSize = -1;
      return this;
    }
    
    public final boolean isInitialized() {
      if (!hasState) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasState()) {
        output.writeBool(1, getState());
      }
    }
    
    private int cachedSize = -1;
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }
    
    public int getSerializedSize() {
      int size = 0;
      if (hasState()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeBoolSize(1, getState());
      }
      cachedSize = size;
      return size;
    }
    
    public ReqScreenState mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            setState(input.readBool());
            break;
          }
        }
      }
    }
    
    public static ReqScreenState parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (ReqScreenState) (new ReqScreenState().mergeFrom(data));
    }
    
    public static ReqScreenState parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return (ReqScreenState) (new ReqScreenState().mergeFrom(input));
    }
    
  }
  
  public static final class RspOperator extends
      com.google.protobuf.micro.MessageMicro {
    public RspOperator() {}
    
    // optional string long_alpha_ons = 1;
    public static final int LONG_ALPHA_ONS_FIELD_NUMBER = 1;
    private boolean hasLongAlphaOns;
    private java.lang.String longAlphaOns_ = "";
    public java.lang.String getLongAlphaOns() { return longAlphaOns_; }
    public boolean hasLongAlphaOns() { return hasLongAlphaOns; }
    public RspOperator setLongAlphaOns(java.lang.String value) {
      hasLongAlphaOns = true;
      longAlphaOns_ = value;
      return this;
    }
    public RspOperator clearLongAlphaOns() {
      hasLongAlphaOns = false;
      longAlphaOns_ = "";
      return this;
    }
    
    // optional string short_alpha_ons = 2;
    public static final int SHORT_ALPHA_ONS_FIELD_NUMBER = 2;
    private boolean hasShortAlphaOns;
    private java.lang.String shortAlphaOns_ = "";
    public java.lang.String getShortAlphaOns() { return shortAlphaOns_; }
    public boolean hasShortAlphaOns() { return hasShortAlphaOns; }
    public RspOperator setShortAlphaOns(java.lang.String value) {
      hasShortAlphaOns = true;
      shortAlphaOns_ = value;
      return this;
    }
    public RspOperator clearShortAlphaOns() {
      hasShortAlphaOns = false;
      shortAlphaOns_ = "";
      return this;
    }
    
    // optional string mcc_mnc = 3;
    public static final int MCC_MNC_FIELD_NUMBER = 3;
    private boolean hasMccMnc;
    private java.lang.String mccMnc_ = "";
    public java.lang.String getMccMnc() { return mccMnc_; }
    public boolean hasMccMnc() { return hasMccMnc; }
    public RspOperator setMccMnc(java.lang.String value) {
      hasMccMnc = true;
      mccMnc_ = value;
      return this;
    }
    public RspOperator clearMccMnc() {
      hasMccMnc = false;
      mccMnc_ = "";
      return this;
    }
    
    public final RspOperator clear() {
      clearLongAlphaOns();
      clearShortAlphaOns();
      clearMccMnc();
      cachedSize = -1;
      return this;
    }
    
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasLongAlphaOns()) {
        output.writeString(1, getLongAlphaOns());
      }
      if (hasShortAlphaOns()) {
        output.writeString(2, getShortAlphaOns());
      }
      if (hasMccMnc()) {
        output.writeString(3, getMccMnc());
      }
    }
    
    private int cachedSize = -1;
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }
    
    public int getSerializedSize() {
      int size = 0;
      if (hasLongAlphaOns()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeStringSize(1, getLongAlphaOns());
      }
      if (hasShortAlphaOns()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeStringSize(2, getShortAlphaOns());
      }
      if (hasMccMnc()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeStringSize(3, getMccMnc());
      }
      cachedSize = size;
      return size;
    }
    
    public RspOperator mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            setLongAlphaOns(input.readString());
            break;
          }
          case 18: {
            setShortAlphaOns(input.readString());
            break;
          }
          case 26: {
            setMccMnc(input.readString());
            break;
          }
        }
      }
    }
    
    public static RspOperator parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (RspOperator) (new RspOperator().mergeFrom(data));
    }
    
    public static RspOperator parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return (RspOperator) (new RspOperator().mergeFrom(input));
    }
    
  }
  
}
