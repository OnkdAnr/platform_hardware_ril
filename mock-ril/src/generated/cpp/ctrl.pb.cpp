// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ctrl.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ril_proto {

namespace {

const ::google::protobuf::Descriptor* CtrlReqRadioState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CtrlReqRadioState_reflection_ = NULL;
const ::google::protobuf::Descriptor* CtrlRspRadioState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CtrlRspRadioState_reflection_ = NULL;
const ::google::protobuf::Descriptor* CtrlReqSetMTCall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CtrlReqSetMTCall_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CtrlCmd_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CtrlStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ctrl_2eproto() {
  protobuf_AddDesc_ctrl_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ctrl.proto");
  GOOGLE_CHECK(file != NULL);
  CtrlReqRadioState_descriptor_ = file->message_type(0);
  static const int CtrlReqRadioState_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlReqRadioState, state_),
  };
  CtrlReqRadioState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CtrlReqRadioState_descriptor_,
      CtrlReqRadioState::default_instance_,
      CtrlReqRadioState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlReqRadioState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlReqRadioState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CtrlReqRadioState));
  CtrlRspRadioState_descriptor_ = file->message_type(1);
  static const int CtrlRspRadioState_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRspRadioState, state_),
  };
  CtrlRspRadioState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CtrlRspRadioState_descriptor_,
      CtrlRspRadioState::default_instance_,
      CtrlRspRadioState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRspRadioState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRspRadioState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CtrlRspRadioState));
  CtrlReqSetMTCall_descriptor_ = file->message_type(2);
  static const int CtrlReqSetMTCall_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlReqSetMTCall, phone_number_),
  };
  CtrlReqSetMTCall_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CtrlReqSetMTCall_descriptor_,
      CtrlReqSetMTCall::default_instance_,
      CtrlReqSetMTCall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlReqSetMTCall, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlReqSetMTCall, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CtrlReqSetMTCall));
  CtrlCmd_descriptor_ = file->enum_type(0);
  CtrlStatus_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ctrl_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CtrlReqRadioState_descriptor_, &CtrlReqRadioState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CtrlRspRadioState_descriptor_, &CtrlRspRadioState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CtrlReqSetMTCall_descriptor_, &CtrlReqSetMTCall::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ctrl_2eproto() {
  delete CtrlReqRadioState::default_instance_;
  delete CtrlReqRadioState_reflection_;
  delete CtrlRspRadioState::default_instance_;
  delete CtrlRspRadioState_reflection_;
  delete CtrlReqSetMTCall::default_instance_;
  delete CtrlReqSetMTCall_reflection_;
}

void protobuf_AddDesc_ctrl_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ril_proto::protobuf_AddDesc_ril_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nctrl.proto\022\tril_proto\032\tril.proto\"9\n\021Ct"
    "rlReqRadioState\022$\n\005state\030\001 \002(\0162\025.ril_pro"
    "to.RadioState\"9\n\021CtrlRspRadioState\022$\n\005st"
    "ate\030\001 \002(\0162\025.ril_proto.RadioState\"(\n\020Ctrl"
    "ReqSetMTCall\022\024\n\014phone_number\030\001 \002(\t*r\n\007Ct"
    "rlCmd\022\021\n\rCTRL_CMD_ECHO\020\000\022\034\n\030CTRL_CMD_GET"
    "_RADIO_STATE\020\001\022\034\n\030CTRL_CMD_SET_RADIO_STA"
    "TE\020\002\022\030\n\024CTRL_CMD_SET_MT_CALL\020\003*5\n\nCtrlSt"
    "atus\022\022\n\016CTRL_STATUS_OK\020\000\022\023\n\017CTRL_STATUS_"
    "ERR\020\001B7\n(com.android.internal.telephony."
    "ril_protoB\013RilCtrlCmds", 422);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ctrl.proto", &protobuf_RegisterTypes);
  CtrlReqRadioState::default_instance_ = new CtrlReqRadioState();
  CtrlRspRadioState::default_instance_ = new CtrlRspRadioState();
  CtrlReqSetMTCall::default_instance_ = new CtrlReqSetMTCall();
  CtrlReqRadioState::default_instance_->InitAsDefaultInstance();
  CtrlRspRadioState::default_instance_->InitAsDefaultInstance();
  CtrlReqSetMTCall::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ctrl_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ctrl_2eproto {
  StaticDescriptorInitializer_ctrl_2eproto() {
    protobuf_AddDesc_ctrl_2eproto();
  }
} static_descriptor_initializer_ctrl_2eproto_;

const ::google::protobuf::EnumDescriptor* CtrlCmd_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CtrlCmd_descriptor_;
}
bool CtrlCmd_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CtrlStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CtrlStatus_descriptor_;
}
bool CtrlStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CtrlReqRadioState::kStateFieldNumber;
#endif  // !_MSC_VER

CtrlReqRadioState::CtrlReqRadioState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CtrlReqRadioState::InitAsDefaultInstance() {
}

CtrlReqRadioState::CtrlReqRadioState(const CtrlReqRadioState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CtrlReqRadioState::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CtrlReqRadioState::~CtrlReqRadioState() {
  SharedDtor();
}

void CtrlReqRadioState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CtrlReqRadioState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CtrlReqRadioState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CtrlReqRadioState_descriptor_;
}

const CtrlReqRadioState& CtrlReqRadioState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ctrl_2eproto();  return *default_instance_;
}

CtrlReqRadioState* CtrlReqRadioState::default_instance_ = NULL;

CtrlReqRadioState* CtrlReqRadioState::New() const {
  return new CtrlReqRadioState;
}

void CtrlReqRadioState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CtrlReqRadioState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ril_proto.RadioState state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ril_proto::RadioState_IsValid(value)) {
            set_state(static_cast< ril_proto::RadioState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CtrlReqRadioState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ril_proto.RadioState state = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CtrlReqRadioState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ril_proto.RadioState state = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CtrlReqRadioState::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ril_proto.RadioState state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CtrlReqRadioState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CtrlReqRadioState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CtrlReqRadioState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CtrlReqRadioState::MergeFrom(const CtrlReqRadioState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CtrlReqRadioState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtrlReqRadioState::CopyFrom(const CtrlReqRadioState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtrlReqRadioState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CtrlReqRadioState::Swap(CtrlReqRadioState* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CtrlReqRadioState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CtrlReqRadioState_descriptor_;
  metadata.reflection = CtrlReqRadioState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CtrlRspRadioState::kStateFieldNumber;
#endif  // !_MSC_VER

CtrlRspRadioState::CtrlRspRadioState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CtrlRspRadioState::InitAsDefaultInstance() {
}

CtrlRspRadioState::CtrlRspRadioState(const CtrlRspRadioState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CtrlRspRadioState::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CtrlRspRadioState::~CtrlRspRadioState() {
  SharedDtor();
}

void CtrlRspRadioState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CtrlRspRadioState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CtrlRspRadioState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CtrlRspRadioState_descriptor_;
}

const CtrlRspRadioState& CtrlRspRadioState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ctrl_2eproto();  return *default_instance_;
}

CtrlRspRadioState* CtrlRspRadioState::default_instance_ = NULL;

CtrlRspRadioState* CtrlRspRadioState::New() const {
  return new CtrlRspRadioState;
}

void CtrlRspRadioState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CtrlRspRadioState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ril_proto.RadioState state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ril_proto::RadioState_IsValid(value)) {
            set_state(static_cast< ril_proto::RadioState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CtrlRspRadioState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ril_proto.RadioState state = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CtrlRspRadioState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ril_proto.RadioState state = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CtrlRspRadioState::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ril_proto.RadioState state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CtrlRspRadioState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CtrlRspRadioState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CtrlRspRadioState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CtrlRspRadioState::MergeFrom(const CtrlRspRadioState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CtrlRspRadioState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtrlRspRadioState::CopyFrom(const CtrlRspRadioState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtrlRspRadioState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CtrlRspRadioState::Swap(CtrlRspRadioState* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CtrlRspRadioState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CtrlRspRadioState_descriptor_;
  metadata.reflection = CtrlRspRadioState_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CtrlReqSetMTCall::_default_phone_number_;
#ifndef _MSC_VER
const int CtrlReqSetMTCall::kPhoneNumberFieldNumber;
#endif  // !_MSC_VER

CtrlReqSetMTCall::CtrlReqSetMTCall()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CtrlReqSetMTCall::InitAsDefaultInstance() {
}

CtrlReqSetMTCall::CtrlReqSetMTCall(const CtrlReqSetMTCall& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CtrlReqSetMTCall::SharedCtor() {
  _cached_size_ = 0;
  phone_number_ = const_cast< ::std::string*>(&_default_phone_number_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CtrlReqSetMTCall::~CtrlReqSetMTCall() {
  SharedDtor();
}

void CtrlReqSetMTCall::SharedDtor() {
  if (phone_number_ != &_default_phone_number_) {
    delete phone_number_;
  }
  if (this != default_instance_) {
  }
}

void CtrlReqSetMTCall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CtrlReqSetMTCall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CtrlReqSetMTCall_descriptor_;
}

const CtrlReqSetMTCall& CtrlReqSetMTCall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ctrl_2eproto();  return *default_instance_;
}

CtrlReqSetMTCall* CtrlReqSetMTCall::default_instance_ = NULL;

CtrlReqSetMTCall* CtrlReqSetMTCall::New() const {
  return new CtrlReqSetMTCall;
}

void CtrlReqSetMTCall::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (phone_number_ != &_default_phone_number_) {
        phone_number_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CtrlReqSetMTCall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string phone_number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phone_number().data(), this->phone_number().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CtrlReqSetMTCall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string phone_number = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone_number().data(), this->phone_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->phone_number(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CtrlReqSetMTCall::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string phone_number = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone_number().data(), this->phone_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->phone_number(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CtrlReqSetMTCall::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string phone_number = 1;
    if (has_phone_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone_number());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CtrlReqSetMTCall::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CtrlReqSetMTCall* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CtrlReqSetMTCall*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CtrlReqSetMTCall::MergeFrom(const CtrlReqSetMTCall& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_phone_number(from.phone_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CtrlReqSetMTCall::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtrlReqSetMTCall::CopyFrom(const CtrlReqSetMTCall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtrlReqSetMTCall::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CtrlReqSetMTCall::Swap(CtrlReqSetMTCall* other) {
  if (other != this) {
    std::swap(phone_number_, other->phone_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CtrlReqSetMTCall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CtrlReqSetMTCall_descriptor_;
  metadata.reflection = CtrlReqSetMTCall_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ril_proto

// @@protoc_insertion_point(global_scope)
