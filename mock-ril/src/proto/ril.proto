// Copyright 2010 Google Inc. All Rights Reserved.
// Author: wink@google.com (Wink Saville)

package ril_proto;

option java_package='com.android.internal.telephony.ril_proto';
option java_outer_classname='RilCmds';

enum RilCommand {
  CMD_GET_SIM_STATUS                        = 1;
  CMD_ENTER_SIM_PIN                         = 2;
  CMD_HANGUP                                = 12;
  CMD_SCREEN_STATE                          = 61;
}

enum RadioState {
    RADIO_STATE_OFF                         = 0; /* Radio explictly powered off (eg CFUN=0) */
    RADIO_STATE_UNAVAILABLE                 = 1; /* Radio unavailable (eg, resetting or not booted) */
    RADIO_STATE_SIM_NOT_READY               = 2; /* Radio is on, but the SIM interface is not ready */
    RADIO_STATE_SIM_LOCKED_OR_ABSENT        = 3; /* SIM PIN locked, PUK required, network
                                                    personalization locked, or SIM absent */
    RADIO_STATE_SIM_READY                   = 4; /* Radio is on and SIM interface is available */
    RADIO_STATE_RUIM_NOT_READY              = 5; /* Radio is on, but the RUIM interface is not ready */
    RADIO_STATE_RUIM_READY                  = 6; /* Radio is on and the RUIM interface is available */
    RADIO_STATE_RUIM_LOCKED_OR_ABSENT       = 7; /* RUIM PIN locked, PUK required, network
                                                    personalization locked, or RUIM absent */
    RADIO_STATE_NV_NOT_READY                = 8; /* Radio is on, but the NV interface is not available */
    RADIO_STATE_NV_READY                    = 9; /* Radio is on and the NV interface is available */
}

enum RilCardState {
    CARDSTATE_ABSENT   = 0;
    CARDSTATE_PRESENT  = 1;
    CARDSTATE_ERROR    = 2;
}

enum RilPersoSubstate {
    PERSOSUBSTATE_UNKNOWN                   = 0; /* initial state */
    PERSOSUBSTATE_IN_PROGRESS               = 1; /* in between each lock transition */
    PERSOSUBSTATE_READY                     = 2; /* when either SIM or RUIM Perso is finished
                                                    since each app can only have 1 active perso
                                                    involved */
    PERSOSUBSTATE_SIM_NETWORK               = 3;
    PERSOSUBSTATE_SIM_NETWORK_SUBSET        = 4;
    PERSOSUBSTATE_SIM_CORPORATE             = 5;
    PERSOSUBSTATE_SIM_SERVICE_PROVIDER      = 6;
    PERSOSUBSTATE_SIM_SIM                   = 7;
    PERSOSUBSTATE_SIM_NETWORK_PUK           = 8; /* The corresponding perso lock is blocked */
    PERSOSUBSTATE_SIM_NETWORK_SUBSET_PUK    = 9;
    PERSOSUBSTATE_SIM_CORPORATE_PUK         = 10;
    PERSOSUBSTATE_SIM_SERVICE_PROVIDER_PUK  = 11;
    PERSOSUBSTATE_SIM_SIM_PUK               = 12;
    PERSOSUBSTATE_RUIM_NETWORK1             = 13;
    PERSOSUBSTATE_RUIM_NETWORK2             = 14;
    PERSOSUBSTATE_RUIM_HRPD                 = 15;
    PERSOSUBSTATE_RUIM_CORPORATE            = 16;
    PERSOSUBSTATE_RUIM_SERVICE_PROVIDER     = 17;
    PERSOSUBSTATE_RUIM_RUIM                 = 18;
    PERSOSUBSTATE_RUIM_NETWORK1_PUK         = 19; /* The corresponding perso lock is blocked */
    PERSOSUBSTATE_RUIM_NETWORK2_PUK         = 20;
    PERSOSUBSTATE_RUIM_HRPD_PUK             = 21;
    PERSOSUBSTATE_RUIM_CORPORATE_PUK        = 22;
    PERSOSUBSTATE_RUIM_SERVICE_PROVIDER_PUK = 23;
    PERSOSUBSTATE_RUIM_RUIM_PUK             = 24;
}

enum RilAppState {
    APPSTATE_UNKNOWN               = 0;
    APPSTATE_DETECTED              = 1;
    APPSTATE_PIN                   = 2; /* If PIN1 or UPin is required */
    APPSTATE_PUK                   = 3; /* If PUK1 or Puk for UPin is required */
    APPSTATE_SUBSCRIPTION_PERSO    = 4; /* perso_substate should be look at
                                           when app_state is assigned to this value */
    APPSTATE_READY                 = 5;
}

enum RilPinState {
    PINSTATE_UNKNOWN              = 0;
    PINSTATE_ENABLED_NOT_VERIFIED = 1;
    PINSTATE_ENABLED_VERIFIED     = 2;
    PINSTATE_DISABLED             = 3;
    PINSTATE_ENABLED_BLOCKED      = 4;
    PINSTATE_ENABLED_PERM_BLOCKED = 5;
}

enum RilAppType {
  APPTYPE_UNKNOWN = 0;
  APPTYPE_SIM     = 1;
  APPTYPE_USIM    = 2;
  APPTYPE_RUIM    = 3;
  APPTYPE_CSIM    = 4;
}

message RilAppStatus {
  optional RilAppType      app_type         = 1;
  optional RilAppState     app_state        = 2;
  optional RilPersoSubstate perso_substate  = 3; /* applicable only if app_state ==
                                                    APPSTATE_SUBSCRIPTION_PERSO */
  optional string          aid              = 4; /* null terminated string, e.g., from 0xA0, 0x00 -> 0x41,
                                                    0x30, 0x30, 0x30 */
  optional string          app_label        = 5; /* null terminated string */
  optional int32           pin1_replaced    = 6; /* applicable to USIM and CSIM */
  optional RilPinState     pin1             = 7;
  optional RilPinState     pin2             = 8;
}


message RilCardStatus {
  optional RilCardState card_state                      = 1; /* current state */
  optional RilPinState  universal_pin_state             = 2; /* applicable to USIM and CSIM: PINSTATE_xxx */
  optional int32        gsm_umts_subscription_app_index = 3; /* value < CARD_MAX_APPS */
  optional int32        cdma_subscription_app_index     = 4; /* value < CARD_MAX_APPS */
  optional int32        num_applications                = 5; /* value <= CARD_MAX_APPS */
  repeated RilAppStatus applications                    = 6; /* CARD_MAX_APPS == 8 */
}


// Response is an array of strings.
//
// If a strings(i) is "*magic-null*" then that value will be returned as null.
message RspStrings{
  repeated string strings                   = 1;
}

// Response is an array of integers
message RspIntegers{
  repeated int32 integers                   = 1;
}

message ReqGetSimStatus {
}
message RspGetSimStatus {
  required RilCardStatus card_status        = 1;
}


message ReqEnterSimPin {
  required string pin                       = 1;
}
message RspEnterSimPin {
  required int32 retries_remaining          = 1;
}


message ReqHangUp {
  required int32 connection_index           = 1;
}


message ReqScreenState {
  required bool state                       = 1; // true screen is on, false screen is off
}

// RIL_REQUEST_OPERATOR response
message RspOperator{
  optional string long_alpha_ons            = 1; // The long alpha ons or eons
  optional string short_alpha_ons           = 2; // The short alpha ons or eons
  optional string mcc_mnc                   = 3; // the 5 or 6 digit mcc + mnc
}
