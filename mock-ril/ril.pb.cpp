// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ril.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ril_proto {

namespace {

const ::google::protobuf::Descriptor* RilAppStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RilAppStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* RilCardStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RilCardStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspStrings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspStrings_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspIntegers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspIntegers_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqGetSimStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqGetSimStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspGetSimStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspGetSimStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqEnterSimPin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqEnterSimPin_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspEnterSimPin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspEnterSimPin_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqHangUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqHangUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqScreenState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqScreenState_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspOperator_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspOperator_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RilCommand_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RadioState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RilCardState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RilPersoSubstate_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RilAppState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RilPinState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RilAppType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ril_2eproto() {
  protobuf_AddDesc_ril_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ril.proto");
  GOOGLE_CHECK(file != NULL);
  RilAppStatus_descriptor_ = file->message_type(0);
  static const int RilAppStatus_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RilAppStatus, app_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RilAppStatus, app_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RilAppStatus, perso_substate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RilAppStatus, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RilAppStatus, app_label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RilAppStatus, pin1_replaced_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RilAppStatus, pin1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RilAppStatus, pin2_),
  };
  RilAppStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RilAppStatus_descriptor_,
      RilAppStatus::default_instance_,
      RilAppStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RilAppStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RilAppStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RilAppStatus));
  RilCardStatus_descriptor_ = file->message_type(1);
  static const int RilCardStatus_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RilCardStatus, card_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RilCardStatus, universal_pin_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RilCardStatus, gsm_umts_subscription_app_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RilCardStatus, cdma_subscription_app_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RilCardStatus, num_applications_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RilCardStatus, applications_),
  };
  RilCardStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RilCardStatus_descriptor_,
      RilCardStatus::default_instance_,
      RilCardStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RilCardStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RilCardStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RilCardStatus));
  RspStrings_descriptor_ = file->message_type(2);
  static const int RspStrings_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspStrings, strings_),
  };
  RspStrings_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspStrings_descriptor_,
      RspStrings::default_instance_,
      RspStrings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspStrings, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspStrings, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspStrings));
  RspIntegers_descriptor_ = file->message_type(3);
  static const int RspIntegers_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspIntegers, integers_),
  };
  RspIntegers_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspIntegers_descriptor_,
      RspIntegers::default_instance_,
      RspIntegers_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspIntegers, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspIntegers, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspIntegers));
  ReqGetSimStatus_descriptor_ = file->message_type(4);
  static const int ReqGetSimStatus_offsets_[1] = {
  };
  ReqGetSimStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqGetSimStatus_descriptor_,
      ReqGetSimStatus::default_instance_,
      ReqGetSimStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetSimStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetSimStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqGetSimStatus));
  RspGetSimStatus_descriptor_ = file->message_type(5);
  static const int RspGetSimStatus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetSimStatus, card_status_),
  };
  RspGetSimStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspGetSimStatus_descriptor_,
      RspGetSimStatus::default_instance_,
      RspGetSimStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetSimStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetSimStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspGetSimStatus));
  ReqEnterSimPin_descriptor_ = file->message_type(6);
  static const int ReqEnterSimPin_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEnterSimPin, pin_),
  };
  ReqEnterSimPin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqEnterSimPin_descriptor_,
      ReqEnterSimPin::default_instance_,
      ReqEnterSimPin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEnterSimPin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEnterSimPin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqEnterSimPin));
  RspEnterSimPin_descriptor_ = file->message_type(7);
  static const int RspEnterSimPin_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspEnterSimPin, retries_remaining_),
  };
  RspEnterSimPin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspEnterSimPin_descriptor_,
      RspEnterSimPin::default_instance_,
      RspEnterSimPin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspEnterSimPin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspEnterSimPin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspEnterSimPin));
  ReqHangUp_descriptor_ = file->message_type(8);
  static const int ReqHangUp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHangUp, connection_index_),
  };
  ReqHangUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqHangUp_descriptor_,
      ReqHangUp::default_instance_,
      ReqHangUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHangUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHangUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqHangUp));
  ReqScreenState_descriptor_ = file->message_type(9);
  static const int ReqScreenState_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqScreenState, state_),
  };
  ReqScreenState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqScreenState_descriptor_,
      ReqScreenState::default_instance_,
      ReqScreenState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqScreenState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqScreenState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqScreenState));
  RspOperator_descriptor_ = file->message_type(10);
  static const int RspOperator_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspOperator, long_alpha_ons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspOperator, short_alpha_ons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspOperator, mcc_mnc_),
  };
  RspOperator_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspOperator_descriptor_,
      RspOperator::default_instance_,
      RspOperator_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspOperator, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspOperator, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspOperator));
  RilCommand_descriptor_ = file->enum_type(0);
  RadioState_descriptor_ = file->enum_type(1);
  RilCardState_descriptor_ = file->enum_type(2);
  RilPersoSubstate_descriptor_ = file->enum_type(3);
  RilAppState_descriptor_ = file->enum_type(4);
  RilPinState_descriptor_ = file->enum_type(5);
  RilAppType_descriptor_ = file->enum_type(6);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ril_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RilAppStatus_descriptor_, &RilAppStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RilCardStatus_descriptor_, &RilCardStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspStrings_descriptor_, &RspStrings::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspIntegers_descriptor_, &RspIntegers::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqGetSimStatus_descriptor_, &ReqGetSimStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspGetSimStatus_descriptor_, &RspGetSimStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqEnterSimPin_descriptor_, &ReqEnterSimPin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspEnterSimPin_descriptor_, &RspEnterSimPin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqHangUp_descriptor_, &ReqHangUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqScreenState_descriptor_, &ReqScreenState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspOperator_descriptor_, &RspOperator::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ril_2eproto() {
  delete RilAppStatus::default_instance_;
  delete RilAppStatus_reflection_;
  delete RilCardStatus::default_instance_;
  delete RilCardStatus_reflection_;
  delete RspStrings::default_instance_;
  delete RspStrings_reflection_;
  delete RspIntegers::default_instance_;
  delete RspIntegers_reflection_;
  delete ReqGetSimStatus::default_instance_;
  delete ReqGetSimStatus_reflection_;
  delete RspGetSimStatus::default_instance_;
  delete RspGetSimStatus_reflection_;
  delete ReqEnterSimPin::default_instance_;
  delete ReqEnterSimPin_reflection_;
  delete RspEnterSimPin::default_instance_;
  delete RspEnterSimPin_reflection_;
  delete ReqHangUp::default_instance_;
  delete ReqHangUp_reflection_;
  delete ReqScreenState::default_instance_;
  delete ReqScreenState_reflection_;
  delete RspOperator::default_instance_;
  delete RspOperator_reflection_;
}

void protobuf_AddDesc_ril_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tril.proto\022\tril_proto\"\232\002\n\014RilAppStatus\022"
    "\'\n\010app_type\030\001 \001(\0162\025.ril_proto.RilAppType"
    "\022)\n\tapp_state\030\002 \001(\0162\026.ril_proto.RilAppSt"
    "ate\0223\n\016perso_substate\030\003 \001(\0162\033.ril_proto."
    "RilPersoSubstate\022\013\n\003aid\030\004 \001(\t\022\021\n\tapp_lab"
    "el\030\005 \001(\t\022\025\n\rpin1_replaced\030\006 \001(\005\022$\n\004pin1\030"
    "\007 \001(\0162\026.ril_proto.RilPinState\022$\n\004pin2\030\010 "
    "\001(\0162\026.ril_proto.RilPinState\"\210\002\n\rRilCardS"
    "tatus\022+\n\ncard_state\030\001 \001(\0162\027.ril_proto.Ri"
    "lCardState\0223\n\023universal_pin_state\030\002 \001(\0162"
    "\026.ril_proto.RilPinState\022\'\n\037gsm_umts_subs"
    "cription_app_index\030\003 \001(\005\022#\n\033cdma_subscri"
    "ption_app_index\030\004 \001(\005\022\030\n\020num_application"
    "s\030\005 \001(\005\022-\n\014applications\030\006 \003(\0132\027.ril_prot"
    "o.RilAppStatus\"\035\n\nRspStrings\022\017\n\007strings\030"
    "\001 \003(\t\"\037\n\013RspIntegers\022\020\n\010integers\030\001 \003(\005\"\021"
    "\n\017ReqGetSimStatus\"@\n\017RspGetSimStatus\022-\n\013"
    "card_status\030\001 \002(\0132\030.ril_proto.RilCardSta"
    "tus\"\035\n\016ReqEnterSimPin\022\013\n\003pin\030\001 \002(\t\"+\n\016Rs"
    "pEnterSimPin\022\031\n\021retries_remaining\030\001 \002(\005\""
    "%\n\tReqHangUp\022\030\n\020connection_index\030\001 \002(\005\"\037"
    "\n\016ReqScreenState\022\r\n\005state\030\001 \002(\010\"O\n\013RspOp"
    "erator\022\026\n\016long_alpha_ons\030\001 \001(\t\022\027\n\017short_"
    "alpha_ons\030\002 \001(\t\022\017\n\007mcc_mnc\030\003 \001(\t*a\n\nRilC"
    "ommand\022\026\n\022CMD_GET_SIM_STATUS\020\001\022\025\n\021CMD_EN"
    "TER_SIM_PIN\020\002\022\016\n\nCMD_HANGUP\020\014\022\024\n\020CMD_SCR"
    "EEN_STATE\020=*\271\002\n\nRadioState\022\023\n\017RADIO_STAT"
    "E_OFF\020\000\022\033\n\027RADIO_STATE_UNAVAILABLE\020\001\022\035\n\031"
    "RADIO_STATE_SIM_NOT_READY\020\002\022$\n RADIO_STA"
    "TE_SIM_LOCKED_OR_ABSENT\020\003\022\031\n\025RADIO_STATE"
    "_SIM_READY\020\004\022\036\n\032RADIO_STATE_RUIM_NOT_REA"
    "DY\020\005\022\032\n\026RADIO_STATE_RUIM_READY\020\006\022%\n!RADI"
    "O_STATE_RUIM_LOCKED_OR_ABSENT\020\007\022\034\n\030RADIO"
    "_STATE_NV_NOT_READY\020\010\022\030\n\024RADIO_STATE_NV_"
    "READY\020\t*P\n\014RilCardState\022\024\n\020CARDSTATE_ABS"
    "ENT\020\000\022\025\n\021CARDSTATE_PRESENT\020\001\022\023\n\017CARDSTAT"
    "E_ERROR\020\002*\361\006\n\020RilPersoSubstate\022\031\n\025PERSOS"
    "UBSTATE_UNKNOWN\020\000\022\035\n\031PERSOSUBSTATE_IN_PR"
    "OGRESS\020\001\022\027\n\023PERSOSUBSTATE_READY\020\002\022\035\n\031PER"
    "SOSUBSTATE_SIM_NETWORK\020\003\022$\n PERSOSUBSTAT"
    "E_SIM_NETWORK_SUBSET\020\004\022\037\n\033PERSOSUBSTATE_"
    "SIM_CORPORATE\020\005\022&\n\"PERSOSUBSTATE_SIM_SER"
    "VICE_PROVIDER\020\006\022\031\n\025PERSOSUBSTATE_SIM_SIM"
    "\020\007\022!\n\035PERSOSUBSTATE_SIM_NETWORK_PUK\020\010\022(\n"
    "$PERSOSUBSTATE_SIM_NETWORK_SUBSET_PUK\020\t\022"
    "#\n\037PERSOSUBSTATE_SIM_CORPORATE_PUK\020\n\022*\n&"
    "PERSOSUBSTATE_SIM_SERVICE_PROVIDER_PUK\020\013"
    "\022\035\n\031PERSOSUBSTATE_SIM_SIM_PUK\020\014\022\037\n\033PERSO"
    "SUBSTATE_RUIM_NETWORK1\020\r\022\037\n\033PERSOSUBSTAT"
    "E_RUIM_NETWORK2\020\016\022\033\n\027PERSOSUBSTATE_RUIM_"
    "HRPD\020\017\022 \n\034PERSOSUBSTATE_RUIM_CORPORATE\020\020"
    "\022\'\n#PERSOSUBSTATE_RUIM_SERVICE_PROVIDER\020"
    "\021\022\033\n\027PERSOSUBSTATE_RUIM_RUIM\020\022\022#\n\037PERSOS"
    "UBSTATE_RUIM_NETWORK1_PUK\020\023\022#\n\037PERSOSUBS"
    "TATE_RUIM_NETWORK2_PUK\020\024\022\037\n\033PERSOSUBSTAT"
    "E_RUIM_HRPD_PUK\020\025\022$\n PERSOSUBSTATE_RUIM_"
    "CORPORATE_PUK\020\026\022+\n\'PERSOSUBSTATE_RUIM_SE"
    "RVICE_PROVIDER_PUK\020\027\022\037\n\033PERSOSUBSTATE_RU"
    "IM_RUIM_PUK\020\030*\223\001\n\013RilAppState\022\024\n\020APPSTAT"
    "E_UNKNOWN\020\000\022\025\n\021APPSTATE_DETECTED\020\001\022\020\n\014AP"
    "PSTATE_PIN\020\002\022\020\n\014APPSTATE_PUK\020\003\022\037\n\033APPSTA"
    "TE_SUBSCRIPTION_PERSO\020\004\022\022\n\016APPSTATE_READ"
    "Y\020\005*\275\001\n\013RilPinState\022\024\n\020PINSTATE_UNKNOWN\020"
    "\000\022!\n\035PINSTATE_ENABLED_NOT_VERIFIED\020\001\022\035\n\031"
    "PINSTATE_ENABLED_VERIFIED\020\002\022\025\n\021PINSTATE_"
    "DISABLED\020\003\022\034\n\030PINSTATE_ENABLED_BLOCKED\020\004"
    "\022!\n\035PINSTATE_ENABLED_PERM_BLOCKED\020\005*h\n\nR"
    "ilAppType\022\023\n\017APPTYPE_UNKNOWN\020\000\022\017\n\013APPTYP"
    "E_SIM\020\001\022\020\n\014APPTYPE_USIM\020\002\022\020\n\014APPTYPE_RUI"
    "M\020\003\022\020\n\014APPTYPE_CSIM\020\004B3\n(com.android.int"
    "ernal.telephony.ril_protoB\007RilCmds", 2834);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ril.proto", &protobuf_RegisterTypes);
  RilAppStatus::default_instance_ = new RilAppStatus();
  RilCardStatus::default_instance_ = new RilCardStatus();
  RspStrings::default_instance_ = new RspStrings();
  RspIntegers::default_instance_ = new RspIntegers();
  ReqGetSimStatus::default_instance_ = new ReqGetSimStatus();
  RspGetSimStatus::default_instance_ = new RspGetSimStatus();
  ReqEnterSimPin::default_instance_ = new ReqEnterSimPin();
  RspEnterSimPin::default_instance_ = new RspEnterSimPin();
  ReqHangUp::default_instance_ = new ReqHangUp();
  ReqScreenState::default_instance_ = new ReqScreenState();
  RspOperator::default_instance_ = new RspOperator();
  RilAppStatus::default_instance_->InitAsDefaultInstance();
  RilCardStatus::default_instance_->InitAsDefaultInstance();
  RspStrings::default_instance_->InitAsDefaultInstance();
  RspIntegers::default_instance_->InitAsDefaultInstance();
  ReqGetSimStatus::default_instance_->InitAsDefaultInstance();
  RspGetSimStatus::default_instance_->InitAsDefaultInstance();
  ReqEnterSimPin::default_instance_->InitAsDefaultInstance();
  RspEnterSimPin::default_instance_->InitAsDefaultInstance();
  ReqHangUp::default_instance_->InitAsDefaultInstance();
  ReqScreenState::default_instance_->InitAsDefaultInstance();
  RspOperator::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ril_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ril_2eproto {
  StaticDescriptorInitializer_ril_2eproto() {
    protobuf_AddDesc_ril_2eproto();
  }
} static_descriptor_initializer_ril_2eproto_;

const ::google::protobuf::EnumDescriptor* RilCommand_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RilCommand_descriptor_;
}
bool RilCommand_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 12:
    case 61:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RadioState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RadioState_descriptor_;
}
bool RadioState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RilCardState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RilCardState_descriptor_;
}
bool RilCardState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RilPersoSubstate_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RilPersoSubstate_descriptor_;
}
bool RilPersoSubstate_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RilAppState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RilAppState_descriptor_;
}
bool RilAppState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RilPinState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RilPinState_descriptor_;
}
bool RilPinState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RilAppType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RilAppType_descriptor_;
}
bool RilAppType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::std::string RilAppStatus::_default_aid_;
const ::std::string RilAppStatus::_default_app_label_;
#ifndef _MSC_VER
const int RilAppStatus::kAppTypeFieldNumber;
const int RilAppStatus::kAppStateFieldNumber;
const int RilAppStatus::kPersoSubstateFieldNumber;
const int RilAppStatus::kAidFieldNumber;
const int RilAppStatus::kAppLabelFieldNumber;
const int RilAppStatus::kPin1ReplacedFieldNumber;
const int RilAppStatus::kPin1FieldNumber;
const int RilAppStatus::kPin2FieldNumber;
#endif  // !_MSC_VER

RilAppStatus::RilAppStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RilAppStatus::InitAsDefaultInstance() {
}

RilAppStatus::RilAppStatus(const RilAppStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RilAppStatus::SharedCtor() {
  _cached_size_ = 0;
  app_type_ = 0;
  app_state_ = 0;
  perso_substate_ = 0;
  aid_ = const_cast< ::std::string*>(&_default_aid_);
  app_label_ = const_cast< ::std::string*>(&_default_app_label_);
  pin1_replaced_ = 0;
  pin1_ = 0;
  pin2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RilAppStatus::~RilAppStatus() {
  SharedDtor();
}

void RilAppStatus::SharedDtor() {
  if (aid_ != &_default_aid_) {
    delete aid_;
  }
  if (app_label_ != &_default_app_label_) {
    delete app_label_;
  }
  if (this != default_instance_) {
  }
}

void RilAppStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RilAppStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RilAppStatus_descriptor_;
}

const RilAppStatus& RilAppStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ril_2eproto();  return *default_instance_;
}

RilAppStatus* RilAppStatus::default_instance_ = NULL;

RilAppStatus* RilAppStatus::New() const {
  return new RilAppStatus;
}

void RilAppStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_type_ = 0;
    app_state_ = 0;
    perso_substate_ = 0;
    if (_has_bit(3)) {
      if (aid_ != &_default_aid_) {
        aid_->clear();
      }
    }
    if (_has_bit(4)) {
      if (app_label_ != &_default_app_label_) {
        app_label_->clear();
      }
    }
    pin1_replaced_ = 0;
    pin1_ = 0;
    pin2_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RilAppStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ril_proto.RilAppType app_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ril_proto::RilAppType_IsValid(value)) {
            set_app_type(static_cast< ril_proto::RilAppType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_app_state;
        break;
      }
      
      // optional .ril_proto.RilAppState app_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_app_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ril_proto::RilAppState_IsValid(value)) {
            set_app_state(static_cast< ril_proto::RilAppState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_perso_substate;
        break;
      }
      
      // optional .ril_proto.RilPersoSubstate perso_substate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_perso_substate:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ril_proto::RilPersoSubstate_IsValid(value)) {
            set_perso_substate(static_cast< ril_proto::RilPersoSubstate >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_aid;
        break;
      }
      
      // optional string aid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_aid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_aid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->aid().data(), this->aid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_app_label;
        break;
      }
      
      // optional string app_label = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->app_label().data(), this->app_label().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_pin1_replaced;
        break;
      }
      
      // optional int32 pin1_replaced = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pin1_replaced:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pin1_replaced_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_pin1;
        break;
      }
      
      // optional .ril_proto.RilPinState pin1 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pin1:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ril_proto::RilPinState_IsValid(value)) {
            set_pin1(static_cast< ril_proto::RilPinState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_pin2;
        break;
      }
      
      // optional .ril_proto.RilPinState pin2 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pin2:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ril_proto::RilPinState_IsValid(value)) {
            set_pin2(static_cast< ril_proto::RilPinState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RilAppStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ril_proto.RilAppType app_type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->app_type(), output);
  }
  
  // optional .ril_proto.RilAppState app_state = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->app_state(), output);
  }
  
  // optional .ril_proto.RilPersoSubstate perso_substate = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->perso_substate(), output);
  }
  
  // optional string aid = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->aid().data(), this->aid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->aid(), output);
  }
  
  // optional string app_label = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_label().data(), this->app_label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->app_label(), output);
  }
  
  // optional int32 pin1_replaced = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->pin1_replaced(), output);
  }
  
  // optional .ril_proto.RilPinState pin1 = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->pin1(), output);
  }
  
  // optional .ril_proto.RilPinState pin2 = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->pin2(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RilAppStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ril_proto.RilAppType app_type = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->app_type(), target);
  }
  
  // optional .ril_proto.RilAppState app_state = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->app_state(), target);
  }
  
  // optional .ril_proto.RilPersoSubstate perso_substate = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->perso_substate(), target);
  }
  
  // optional string aid = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->aid().data(), this->aid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->aid(), target);
  }
  
  // optional string app_label = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_label().data(), this->app_label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->app_label(), target);
  }
  
  // optional int32 pin1_replaced = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->pin1_replaced(), target);
  }
  
  // optional .ril_proto.RilPinState pin1 = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->pin1(), target);
  }
  
  // optional .ril_proto.RilPinState pin2 = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->pin2(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RilAppStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ril_proto.RilAppType app_type = 1;
    if (has_app_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->app_type());
    }
    
    // optional .ril_proto.RilAppState app_state = 2;
    if (has_app_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->app_state());
    }
    
    // optional .ril_proto.RilPersoSubstate perso_substate = 3;
    if (has_perso_substate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->perso_substate());
    }
    
    // optional string aid = 4;
    if (has_aid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->aid());
    }
    
    // optional string app_label = 5;
    if (has_app_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_label());
    }
    
    // optional int32 pin1_replaced = 6;
    if (has_pin1_replaced()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pin1_replaced());
    }
    
    // optional .ril_proto.RilPinState pin1 = 7;
    if (has_pin1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pin1());
    }
    
    // optional .ril_proto.RilPinState pin2 = 8;
    if (has_pin2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pin2());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RilAppStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RilAppStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RilAppStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RilAppStatus::MergeFrom(const RilAppStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_app_type(from.app_type());
    }
    if (from._has_bit(1)) {
      set_app_state(from.app_state());
    }
    if (from._has_bit(2)) {
      set_perso_substate(from.perso_substate());
    }
    if (from._has_bit(3)) {
      set_aid(from.aid());
    }
    if (from._has_bit(4)) {
      set_app_label(from.app_label());
    }
    if (from._has_bit(5)) {
      set_pin1_replaced(from.pin1_replaced());
    }
    if (from._has_bit(6)) {
      set_pin1(from.pin1());
    }
    if (from._has_bit(7)) {
      set_pin2(from.pin2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RilAppStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RilAppStatus::CopyFrom(const RilAppStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RilAppStatus::IsInitialized() const {
  
  return true;
}

void RilAppStatus::Swap(RilAppStatus* other) {
  if (other != this) {
    std::swap(app_type_, other->app_type_);
    std::swap(app_state_, other->app_state_);
    std::swap(perso_substate_, other->perso_substate_);
    std::swap(aid_, other->aid_);
    std::swap(app_label_, other->app_label_);
    std::swap(pin1_replaced_, other->pin1_replaced_);
    std::swap(pin1_, other->pin1_);
    std::swap(pin2_, other->pin2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RilAppStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RilAppStatus_descriptor_;
  metadata.reflection = RilAppStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RilCardStatus::kCardStateFieldNumber;
const int RilCardStatus::kUniversalPinStateFieldNumber;
const int RilCardStatus::kGsmUmtsSubscriptionAppIndexFieldNumber;
const int RilCardStatus::kCdmaSubscriptionAppIndexFieldNumber;
const int RilCardStatus::kNumApplicationsFieldNumber;
const int RilCardStatus::kApplicationsFieldNumber;
#endif  // !_MSC_VER

RilCardStatus::RilCardStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RilCardStatus::InitAsDefaultInstance() {
}

RilCardStatus::RilCardStatus(const RilCardStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RilCardStatus::SharedCtor() {
  _cached_size_ = 0;
  card_state_ = 0;
  universal_pin_state_ = 0;
  gsm_umts_subscription_app_index_ = 0;
  cdma_subscription_app_index_ = 0;
  num_applications_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RilCardStatus::~RilCardStatus() {
  SharedDtor();
}

void RilCardStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RilCardStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RilCardStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RilCardStatus_descriptor_;
}

const RilCardStatus& RilCardStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ril_2eproto();  return *default_instance_;
}

RilCardStatus* RilCardStatus::default_instance_ = NULL;

RilCardStatus* RilCardStatus::New() const {
  return new RilCardStatus;
}

void RilCardStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    card_state_ = 0;
    universal_pin_state_ = 0;
    gsm_umts_subscription_app_index_ = 0;
    cdma_subscription_app_index_ = 0;
    num_applications_ = 0;
  }
  applications_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RilCardStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ril_proto.RilCardState card_state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ril_proto::RilCardState_IsValid(value)) {
            set_card_state(static_cast< ril_proto::RilCardState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_universal_pin_state;
        break;
      }
      
      // optional .ril_proto.RilPinState universal_pin_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_universal_pin_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ril_proto::RilPinState_IsValid(value)) {
            set_universal_pin_state(static_cast< ril_proto::RilPinState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gsm_umts_subscription_app_index;
        break;
      }
      
      // optional int32 gsm_umts_subscription_app_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gsm_umts_subscription_app_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gsm_umts_subscription_app_index_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cdma_subscription_app_index;
        break;
      }
      
      // optional int32 cdma_subscription_app_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cdma_subscription_app_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cdma_subscription_app_index_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_num_applications;
        break;
      }
      
      // optional int32 num_applications = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_applications:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_applications_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_applications;
        break;
      }
      
      // repeated .ril_proto.RilAppStatus applications = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_applications:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_applications()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_applications;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RilCardStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ril_proto.RilCardState card_state = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->card_state(), output);
  }
  
  // optional .ril_proto.RilPinState universal_pin_state = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->universal_pin_state(), output);
  }
  
  // optional int32 gsm_umts_subscription_app_index = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gsm_umts_subscription_app_index(), output);
  }
  
  // optional int32 cdma_subscription_app_index = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cdma_subscription_app_index(), output);
  }
  
  // optional int32 num_applications = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->num_applications(), output);
  }
  
  // repeated .ril_proto.RilAppStatus applications = 6;
  for (int i = 0; i < this->applications_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->applications(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RilCardStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ril_proto.RilCardState card_state = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->card_state(), target);
  }
  
  // optional .ril_proto.RilPinState universal_pin_state = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->universal_pin_state(), target);
  }
  
  // optional int32 gsm_umts_subscription_app_index = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gsm_umts_subscription_app_index(), target);
  }
  
  // optional int32 cdma_subscription_app_index = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cdma_subscription_app_index(), target);
  }
  
  // optional int32 num_applications = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->num_applications(), target);
  }
  
  // repeated .ril_proto.RilAppStatus applications = 6;
  for (int i = 0; i < this->applications_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->applications(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RilCardStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ril_proto.RilCardState card_state = 1;
    if (has_card_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->card_state());
    }
    
    // optional .ril_proto.RilPinState universal_pin_state = 2;
    if (has_universal_pin_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->universal_pin_state());
    }
    
    // optional int32 gsm_umts_subscription_app_index = 3;
    if (has_gsm_umts_subscription_app_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gsm_umts_subscription_app_index());
    }
    
    // optional int32 cdma_subscription_app_index = 4;
    if (has_cdma_subscription_app_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cdma_subscription_app_index());
    }
    
    // optional int32 num_applications = 5;
    if (has_num_applications()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_applications());
    }
    
  }
  // repeated .ril_proto.RilAppStatus applications = 6;
  total_size += 1 * this->applications_size();
  for (int i = 0; i < this->applications_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->applications(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RilCardStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RilCardStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RilCardStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RilCardStatus::MergeFrom(const RilCardStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  applications_.MergeFrom(from.applications_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_card_state(from.card_state());
    }
    if (from._has_bit(1)) {
      set_universal_pin_state(from.universal_pin_state());
    }
    if (from._has_bit(2)) {
      set_gsm_umts_subscription_app_index(from.gsm_umts_subscription_app_index());
    }
    if (from._has_bit(3)) {
      set_cdma_subscription_app_index(from.cdma_subscription_app_index());
    }
    if (from._has_bit(4)) {
      set_num_applications(from.num_applications());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RilCardStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RilCardStatus::CopyFrom(const RilCardStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RilCardStatus::IsInitialized() const {
  
  return true;
}

void RilCardStatus::Swap(RilCardStatus* other) {
  if (other != this) {
    std::swap(card_state_, other->card_state_);
    std::swap(universal_pin_state_, other->universal_pin_state_);
    std::swap(gsm_umts_subscription_app_index_, other->gsm_umts_subscription_app_index_);
    std::swap(cdma_subscription_app_index_, other->cdma_subscription_app_index_);
    std::swap(num_applications_, other->num_applications_);
    applications_.Swap(&other->applications_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RilCardStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RilCardStatus_descriptor_;
  metadata.reflection = RilCardStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspStrings::kStringsFieldNumber;
#endif  // !_MSC_VER

RspStrings::RspStrings()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RspStrings::InitAsDefaultInstance() {
}

RspStrings::RspStrings(const RspStrings& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RspStrings::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspStrings::~RspStrings() {
  SharedDtor();
}

void RspStrings::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RspStrings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspStrings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspStrings_descriptor_;
}

const RspStrings& RspStrings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ril_2eproto();  return *default_instance_;
}

RspStrings* RspStrings::default_instance_ = NULL;

RspStrings* RspStrings::New() const {
  return new RspStrings;
}

void RspStrings::Clear() {
  strings_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspStrings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string strings = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_strings()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strings(0).data(), this->strings(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_strings;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RspStrings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string strings = 1;
  for (int i = 0; i < this->strings_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->strings(i).data(), this->strings(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->strings(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RspStrings::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string strings = 1;
  for (int i = 0; i < this->strings_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strings(i).data(), this->strings(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->strings(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RspStrings::ByteSize() const {
  int total_size = 0;
  
  // repeated string strings = 1;
  total_size += 1 * this->strings_size();
  for (int i = 0; i < this->strings_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->strings(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspStrings::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspStrings* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspStrings*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspStrings::MergeFrom(const RspStrings& from) {
  GOOGLE_CHECK_NE(&from, this);
  strings_.MergeFrom(from.strings_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspStrings::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspStrings::CopyFrom(const RspStrings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspStrings::IsInitialized() const {
  
  return true;
}

void RspStrings::Swap(RspStrings* other) {
  if (other != this) {
    strings_.Swap(&other->strings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspStrings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspStrings_descriptor_;
  metadata.reflection = RspStrings_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspIntegers::kIntegersFieldNumber;
#endif  // !_MSC_VER

RspIntegers::RspIntegers()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RspIntegers::InitAsDefaultInstance() {
}

RspIntegers::RspIntegers(const RspIntegers& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RspIntegers::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspIntegers::~RspIntegers() {
  SharedDtor();
}

void RspIntegers::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RspIntegers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspIntegers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspIntegers_descriptor_;
}

const RspIntegers& RspIntegers::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ril_2eproto();  return *default_instance_;
}

RspIntegers* RspIntegers::default_instance_ = NULL;

RspIntegers* RspIntegers::New() const {
  return new RspIntegers;
}

void RspIntegers::Clear() {
  integers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspIntegers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 integers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_integers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_integers())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_integers())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_integers;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RspIntegers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 integers = 1;
  for (int i = 0; i < this->integers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->integers(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RspIntegers::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 integers = 1;
  for (int i = 0; i < this->integers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->integers(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RspIntegers::ByteSize() const {
  int total_size = 0;
  
  // repeated int32 integers = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->integers_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->integers(i));
    }
    total_size += 1 * this->integers_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspIntegers::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspIntegers* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspIntegers*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspIntegers::MergeFrom(const RspIntegers& from) {
  GOOGLE_CHECK_NE(&from, this);
  integers_.MergeFrom(from.integers_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspIntegers::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspIntegers::CopyFrom(const RspIntegers& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspIntegers::IsInitialized() const {
  
  return true;
}

void RspIntegers::Swap(RspIntegers* other) {
  if (other != this) {
    integers_.Swap(&other->integers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspIntegers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspIntegers_descriptor_;
  metadata.reflection = RspIntegers_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReqGetSimStatus::ReqGetSimStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqGetSimStatus::InitAsDefaultInstance() {
}

ReqGetSimStatus::ReqGetSimStatus(const ReqGetSimStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqGetSimStatus::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqGetSimStatus::~ReqGetSimStatus() {
  SharedDtor();
}

void ReqGetSimStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqGetSimStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqGetSimStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqGetSimStatus_descriptor_;
}

const ReqGetSimStatus& ReqGetSimStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ril_2eproto();  return *default_instance_;
}

ReqGetSimStatus* ReqGetSimStatus::default_instance_ = NULL;

ReqGetSimStatus* ReqGetSimStatus::New() const {
  return new ReqGetSimStatus;
}

void ReqGetSimStatus::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqGetSimStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ReqGetSimStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqGetSimStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqGetSimStatus::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqGetSimStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqGetSimStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqGetSimStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqGetSimStatus::MergeFrom(const ReqGetSimStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqGetSimStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGetSimStatus::CopyFrom(const ReqGetSimStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGetSimStatus::IsInitialized() const {
  
  return true;
}

void ReqGetSimStatus::Swap(ReqGetSimStatus* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqGetSimStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqGetSimStatus_descriptor_;
  metadata.reflection = ReqGetSimStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspGetSimStatus::kCardStatusFieldNumber;
#endif  // !_MSC_VER

RspGetSimStatus::RspGetSimStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RspGetSimStatus::InitAsDefaultInstance() {
  card_status_ = const_cast< ::ril_proto::RilCardStatus*>(&::ril_proto::RilCardStatus::default_instance());
}

RspGetSimStatus::RspGetSimStatus(const RspGetSimStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RspGetSimStatus::SharedCtor() {
  _cached_size_ = 0;
  card_status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspGetSimStatus::~RspGetSimStatus() {
  SharedDtor();
}

void RspGetSimStatus::SharedDtor() {
  if (this != default_instance_) {
    delete card_status_;
  }
}

void RspGetSimStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspGetSimStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspGetSimStatus_descriptor_;
}

const RspGetSimStatus& RspGetSimStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ril_2eproto();  return *default_instance_;
}

RspGetSimStatus* RspGetSimStatus::default_instance_ = NULL;

RspGetSimStatus* RspGetSimStatus::New() const {
  return new RspGetSimStatus;
}

void RspGetSimStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (card_status_ != NULL) card_status_->::ril_proto::RilCardStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspGetSimStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ril_proto.RilCardStatus card_status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_card_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RspGetSimStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ril_proto.RilCardStatus card_status = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->card_status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RspGetSimStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ril_proto.RilCardStatus card_status = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->card_status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RspGetSimStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ril_proto.RilCardStatus card_status = 1;
    if (has_card_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->card_status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspGetSimStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspGetSimStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspGetSimStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspGetSimStatus::MergeFrom(const RspGetSimStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_card_status()->::ril_proto::RilCardStatus::MergeFrom(from.card_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspGetSimStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspGetSimStatus::CopyFrom(const RspGetSimStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspGetSimStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RspGetSimStatus::Swap(RspGetSimStatus* other) {
  if (other != this) {
    std::swap(card_status_, other->card_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspGetSimStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspGetSimStatus_descriptor_;
  metadata.reflection = RspGetSimStatus_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string ReqEnterSimPin::_default_pin_;
#ifndef _MSC_VER
const int ReqEnterSimPin::kPinFieldNumber;
#endif  // !_MSC_VER

ReqEnterSimPin::ReqEnterSimPin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqEnterSimPin::InitAsDefaultInstance() {
}

ReqEnterSimPin::ReqEnterSimPin(const ReqEnterSimPin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqEnterSimPin::SharedCtor() {
  _cached_size_ = 0;
  pin_ = const_cast< ::std::string*>(&_default_pin_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqEnterSimPin::~ReqEnterSimPin() {
  SharedDtor();
}

void ReqEnterSimPin::SharedDtor() {
  if (pin_ != &_default_pin_) {
    delete pin_;
  }
  if (this != default_instance_) {
  }
}

void ReqEnterSimPin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqEnterSimPin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqEnterSimPin_descriptor_;
}

const ReqEnterSimPin& ReqEnterSimPin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ril_2eproto();  return *default_instance_;
}

ReqEnterSimPin* ReqEnterSimPin::default_instance_ = NULL;

ReqEnterSimPin* ReqEnterSimPin::New() const {
  return new ReqEnterSimPin;
}

void ReqEnterSimPin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (pin_ != &_default_pin_) {
        pin_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqEnterSimPin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string pin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pin().data(), this->pin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqEnterSimPin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string pin = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->pin(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqEnterSimPin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string pin = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pin(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqEnterSimPin::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string pin = 1;
    if (has_pin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pin());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqEnterSimPin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqEnterSimPin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqEnterSimPin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqEnterSimPin::MergeFrom(const ReqEnterSimPin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_pin(from.pin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqEnterSimPin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqEnterSimPin::CopyFrom(const ReqEnterSimPin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqEnterSimPin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ReqEnterSimPin::Swap(ReqEnterSimPin* other) {
  if (other != this) {
    std::swap(pin_, other->pin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqEnterSimPin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqEnterSimPin_descriptor_;
  metadata.reflection = ReqEnterSimPin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspEnterSimPin::kRetriesRemainingFieldNumber;
#endif  // !_MSC_VER

RspEnterSimPin::RspEnterSimPin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RspEnterSimPin::InitAsDefaultInstance() {
}

RspEnterSimPin::RspEnterSimPin(const RspEnterSimPin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RspEnterSimPin::SharedCtor() {
  _cached_size_ = 0;
  retries_remaining_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspEnterSimPin::~RspEnterSimPin() {
  SharedDtor();
}

void RspEnterSimPin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RspEnterSimPin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspEnterSimPin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspEnterSimPin_descriptor_;
}

const RspEnterSimPin& RspEnterSimPin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ril_2eproto();  return *default_instance_;
}

RspEnterSimPin* RspEnterSimPin::default_instance_ = NULL;

RspEnterSimPin* RspEnterSimPin::New() const {
  return new RspEnterSimPin;
}

void RspEnterSimPin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retries_remaining_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspEnterSimPin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retries_remaining = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retries_remaining_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RspEnterSimPin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retries_remaining = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retries_remaining(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RspEnterSimPin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retries_remaining = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retries_remaining(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RspEnterSimPin::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retries_remaining = 1;
    if (has_retries_remaining()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retries_remaining());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspEnterSimPin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspEnterSimPin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspEnterSimPin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspEnterSimPin::MergeFrom(const RspEnterSimPin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_retries_remaining(from.retries_remaining());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspEnterSimPin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspEnterSimPin::CopyFrom(const RspEnterSimPin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspEnterSimPin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RspEnterSimPin::Swap(RspEnterSimPin* other) {
  if (other != this) {
    std::swap(retries_remaining_, other->retries_remaining_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspEnterSimPin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspEnterSimPin_descriptor_;
  metadata.reflection = RspEnterSimPin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqHangUp::kConnectionIndexFieldNumber;
#endif  // !_MSC_VER

ReqHangUp::ReqHangUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqHangUp::InitAsDefaultInstance() {
}

ReqHangUp::ReqHangUp(const ReqHangUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqHangUp::SharedCtor() {
  _cached_size_ = 0;
  connection_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqHangUp::~ReqHangUp() {
  SharedDtor();
}

void ReqHangUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqHangUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqHangUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqHangUp_descriptor_;
}

const ReqHangUp& ReqHangUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ril_2eproto();  return *default_instance_;
}

ReqHangUp* ReqHangUp::default_instance_ = NULL;

ReqHangUp* ReqHangUp::New() const {
  return new ReqHangUp;
}

void ReqHangUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    connection_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqHangUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 connection_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &connection_index_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqHangUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 connection_index = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->connection_index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqHangUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 connection_index = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->connection_index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqHangUp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 connection_index = 1;
    if (has_connection_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->connection_index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqHangUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqHangUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqHangUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqHangUp::MergeFrom(const ReqHangUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_connection_index(from.connection_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqHangUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqHangUp::CopyFrom(const ReqHangUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqHangUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ReqHangUp::Swap(ReqHangUp* other) {
  if (other != this) {
    std::swap(connection_index_, other->connection_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqHangUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqHangUp_descriptor_;
  metadata.reflection = ReqHangUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqScreenState::kStateFieldNumber;
#endif  // !_MSC_VER

ReqScreenState::ReqScreenState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqScreenState::InitAsDefaultInstance() {
}

ReqScreenState::ReqScreenState(const ReqScreenState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqScreenState::SharedCtor() {
  _cached_size_ = 0;
  state_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqScreenState::~ReqScreenState() {
  SharedDtor();
}

void ReqScreenState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqScreenState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqScreenState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqScreenState_descriptor_;
}

const ReqScreenState& ReqScreenState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ril_2eproto();  return *default_instance_;
}

ReqScreenState* ReqScreenState::default_instance_ = NULL;

ReqScreenState* ReqScreenState::New() const {
  return new ReqScreenState;
}

void ReqScreenState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqScreenState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &state_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqScreenState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool state = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->state(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqScreenState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool state = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->state(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqScreenState::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool state = 1;
    if (has_state()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqScreenState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqScreenState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqScreenState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqScreenState::MergeFrom(const ReqScreenState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqScreenState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqScreenState::CopyFrom(const ReqScreenState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqScreenState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ReqScreenState::Swap(ReqScreenState* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqScreenState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqScreenState_descriptor_;
  metadata.reflection = ReqScreenState_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string RspOperator::_default_long_alpha_ons_;
const ::std::string RspOperator::_default_short_alpha_ons_;
const ::std::string RspOperator::_default_mcc_mnc_;
#ifndef _MSC_VER
const int RspOperator::kLongAlphaOnsFieldNumber;
const int RspOperator::kShortAlphaOnsFieldNumber;
const int RspOperator::kMccMncFieldNumber;
#endif  // !_MSC_VER

RspOperator::RspOperator()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RspOperator::InitAsDefaultInstance() {
}

RspOperator::RspOperator(const RspOperator& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RspOperator::SharedCtor() {
  _cached_size_ = 0;
  long_alpha_ons_ = const_cast< ::std::string*>(&_default_long_alpha_ons_);
  short_alpha_ons_ = const_cast< ::std::string*>(&_default_short_alpha_ons_);
  mcc_mnc_ = const_cast< ::std::string*>(&_default_mcc_mnc_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspOperator::~RspOperator() {
  SharedDtor();
}

void RspOperator::SharedDtor() {
  if (long_alpha_ons_ != &_default_long_alpha_ons_) {
    delete long_alpha_ons_;
  }
  if (short_alpha_ons_ != &_default_short_alpha_ons_) {
    delete short_alpha_ons_;
  }
  if (mcc_mnc_ != &_default_mcc_mnc_) {
    delete mcc_mnc_;
  }
  if (this != default_instance_) {
  }
}

void RspOperator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspOperator::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspOperator_descriptor_;
}

const RspOperator& RspOperator::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ril_2eproto();  return *default_instance_;
}

RspOperator* RspOperator::default_instance_ = NULL;

RspOperator* RspOperator::New() const {
  return new RspOperator;
}

void RspOperator::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (long_alpha_ons_ != &_default_long_alpha_ons_) {
        long_alpha_ons_->clear();
      }
    }
    if (_has_bit(1)) {
      if (short_alpha_ons_ != &_default_short_alpha_ons_) {
        short_alpha_ons_->clear();
      }
    }
    if (_has_bit(2)) {
      if (mcc_mnc_ != &_default_mcc_mnc_) {
        mcc_mnc_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspOperator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string long_alpha_ons = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_long_alpha_ons()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->long_alpha_ons().data(), this->long_alpha_ons().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_short_alpha_ons;
        break;
      }
      
      // optional string short_alpha_ons = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_short_alpha_ons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_short_alpha_ons()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->short_alpha_ons().data(), this->short_alpha_ons().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mcc_mnc;
        break;
      }
      
      // optional string mcc_mnc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mcc_mnc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mcc_mnc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mcc_mnc().data(), this->mcc_mnc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RspOperator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string long_alpha_ons = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->long_alpha_ons().data(), this->long_alpha_ons().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->long_alpha_ons(), output);
  }
  
  // optional string short_alpha_ons = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->short_alpha_ons().data(), this->short_alpha_ons().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->short_alpha_ons(), output);
  }
  
  // optional string mcc_mnc = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mcc_mnc().data(), this->mcc_mnc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->mcc_mnc(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RspOperator::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string long_alpha_ons = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->long_alpha_ons().data(), this->long_alpha_ons().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->long_alpha_ons(), target);
  }
  
  // optional string short_alpha_ons = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->short_alpha_ons().data(), this->short_alpha_ons().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->short_alpha_ons(), target);
  }
  
  // optional string mcc_mnc = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mcc_mnc().data(), this->mcc_mnc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mcc_mnc(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RspOperator::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string long_alpha_ons = 1;
    if (has_long_alpha_ons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->long_alpha_ons());
    }
    
    // optional string short_alpha_ons = 2;
    if (has_short_alpha_ons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->short_alpha_ons());
    }
    
    // optional string mcc_mnc = 3;
    if (has_mcc_mnc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mcc_mnc());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspOperator::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspOperator* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspOperator*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspOperator::MergeFrom(const RspOperator& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_long_alpha_ons(from.long_alpha_ons());
    }
    if (from._has_bit(1)) {
      set_short_alpha_ons(from.short_alpha_ons());
    }
    if (from._has_bit(2)) {
      set_mcc_mnc(from.mcc_mnc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspOperator::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspOperator::CopyFrom(const RspOperator& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspOperator::IsInitialized() const {
  
  return true;
}

void RspOperator::Swap(RspOperator* other) {
  if (other != this) {
    std::swap(long_alpha_ons_, other->long_alpha_ons_);
    std::swap(short_alpha_ons_, other->short_alpha_ons_);
    std::swap(mcc_mnc_, other->mcc_mnc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspOperator::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspOperator_descriptor_;
  metadata.reflection = RspOperator_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ril_proto

// @@protoc_insertion_point(global_scope)
