// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: t.proto

#ifndef PROTOBUF_t_2eproto__INCLUDED
#define PROTOBUF_t_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_t_2eproto();
void protobuf_AssignDesc_t_2eproto();
void protobuf_ShutdownFile_t_2eproto();

class T;

// ===================================================================

class T : public ::google::protobuf::MessageLite {
 public:
  T();
  virtual ~T();
  
  T(const T& from);
  
  inline T& operator=(const T& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const T& default_instance();
  
  void Swap(T* other);
  
  // implements Message ----------------------------------------------
  
  T* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const T& from);
  void MergeFrom(const T& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional string os = 2;
  inline bool has_os() const;
  inline void clear_os();
  static const int kOsFieldNumber = 2;
  inline const ::std::string& os() const;
  inline void set_os(const ::std::string& value);
  inline void set_os(const char* value);
  inline void set_os(const char* value, size_t size);
  inline ::std::string* mutable_os();
  
  // @@protoc_insertion_point(class_scope:T)
 private:
  mutable int _cached_size_;
  
  ::google::protobuf::int32 id_;
  ::std::string* os_;
  static const ::std::string _default_os_;
  friend void  protobuf_AddDesc_t_2eproto();
  friend void protobuf_AssignDesc_t_2eproto();
  friend void protobuf_ShutdownFile_t_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static T* default_instance_;
};
// ===================================================================


// ===================================================================

// T

// required int32 id = 1;
inline bool T::has_id() const {
  return _has_bit(0);
}
inline void T::clear_id() {
  id_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 T::id() const {
  return id_;
}
inline void T::set_id(::google::protobuf::int32 value) {
  _set_bit(0);
  id_ = value;
}

// optional string os = 2;
inline bool T::has_os() const {
  return _has_bit(1);
}
inline void T::clear_os() {
  if (os_ != &_default_os_) {
    os_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& T::os() const {
  return *os_;
}
inline void T::set_os(const ::std::string& value) {
  _set_bit(1);
  if (os_ == &_default_os_) {
    os_ = new ::std::string;
  }
  os_->assign(value);
}
inline void T::set_os(const char* value) {
  _set_bit(1);
  if (os_ == &_default_os_) {
    os_ = new ::std::string;
  }
  os_->assign(value);
}
inline void T::set_os(const char* value, size_t size) {
  _set_bit(1);
  if (os_ == &_default_os_) {
    os_ = new ::std::string;
  }
  os_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* T::mutable_os() {
  _set_bit(1);
  if (os_ == &_default_os_) {
    os_ = new ::std::string;
  }
  return os_;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_t_2eproto__INCLUDED
